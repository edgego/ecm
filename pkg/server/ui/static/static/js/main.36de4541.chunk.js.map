{"version":3,"sources":["app/shared/Footer.js","app/shared/utils.js","app/core/CloudModal.js","app/core/NodeModal.js","app/shared/Spinner.js","app/core/CloudsMgr.js","app/App.js","i18n.js","serviceWorker.js","index.js"],"names":["Footer","className","href","target","rel","Component","deleteIcon","cell","formatterParams","onRendered","validateFQDN","value","parameters","getField","validator","isIP","isFQDN","CloudModal","props","nodeOptions","height","resizableColumns","persistence","selectable","layout","locale","langs","nodeColumns","width","hozAlign","formatter","visible","col","title","t","field","editor","headerHozAlign","type","divisor","editorParams","search","selectContents","elementAttributes","maxlength","values","defaultValue","getValue","getRow","getTable","getLang","custom","worker","master","cellClick","e","getDataCount","deleteRow","addRow","ipaddress","nodetype","state","nodes","cloudName","cloudRegion","sshPassword","sshUser","sshPort","errorMessage","isMore","boxHeight","moreIcon","validated","sshKeyPath","sshCertPath","sshPassphrase","sshAgentAuth","clusterVersionOptions","label","nodeTblRef","React","createRef","cloudNameRef","sshUserRef","sshPasswordRef","sshPortRef","cloudFormRef","clouldRegionRef","sshKeyPathRef","sshCertPathRef","sshPassphraseRef","sshAgentAuthRef","handleCloudAddSubmit","bind","handleClose","handleAddNodeIP","handleCloudNameChange","handleSshAccountChange","handleSshPowordChange","handleSshPortChange","setMoreSshInfo","handleSshkeyPathChange","handleSshCertPathChange","handleSshPassphraseChange","handleSshAgentAuthChange","handleCloudRegionChange","persist","inputValue","this","setState","host","clusterId","sshInfo","pinged","fetch","method","mode","body","JSON","stringify","headers","then","response","ok","text","Promise","reject","textData","catch","error","console","undefined","current","focus","masterips","workerips","table","getData","qualifiedNodes","i","length","push","masterIPStr","pingHost","Notify","description","duration","placement","info","workerIPStr","createPacket","handleProcessingBegin","success","toString","handleProcessingEnd","show","size","onClose","disableOverlayClick","Header","Title","Body","padding","Form","ref","noValidate","fluid","xs","md","color","required","placeholder","pattern","onChange","Control","Feedback","end","align","icon","onClick","Label","as","min","max","aria-hidden","columns","data","options","withTranslation","isURL","NodeModal","handleAddNodesSubmit","cloudId","packStr","Box","Spinner","CloudsMgr","rowEvents","row","rowIndex","provider","name","id","selectedNode","resizableRows","rowFormatter","log","status","getElement","style","foregroundColor","titleFormatter","headerSort","toggleSelect","headerFilter","fontWeight","Ready","NotReady","cloudModalVisible","nodeModalVisible","nodeRoles","workerIPs","portNumber","clouds","processing","confirmDelete","deleteTitle","cloudNodesMap","selectedCloudNodes","cloudIP","defaultSorted","dataField","order","cloudVersionSelectRef","cloudTblRef","handleAddCloud","handleDeleteNode","handleDeleteCloud","nodeRowSelected","nodeRowDeSelected","hideCloudModal","showCloudModal","showNodeModal","hideNodeModal","handleAddNode","handleExpandCluster","handleRefreshClouds","handleOpenCloudSetting","handleDeleteConfirm","handleDeleteCancel","selectRow","clickToSelect","clickToExpand","backgroundColor","classes","hideSelectAll","onSelect","isSelect","expandRow","renderer","Grommet","Tip","plain","content","background","margin","pad","round","flex","Text","Button","disabled","alignSelf","SettingsOption","szie","hoverIndicator","Cluster","Close","isOpen","confirmText","cancelText","maskClosable","hasBackdrop","onCancel","onConfirm","noHover","rowDeselected","rowSelected","onExpand","showExpandColumn","onlyOneExpanding","expandHeaderColumnRenderer","isAnyExpands","expandColumnRenderer","expanded","nodeTblColumns","sort","filter","textFilter","searchable","headerStyle","statusFormatter","dateTimeFormatter","formatExtraData","Date","toLocaleString","str","navigator","language","window","open","nodeRow","respData","slice","splice","ipAddress","instanceId","replaceAll","url","cluster","hostname","delete","loadCloudMetadata","nodeMap","Map","res","json","set","isExpand","expandedCloud","get","masterNodeIp","expandedNodes","nodeIp","roles","nodeRole","match","containerRuntimeVersion","Add","Refresh","bordered","key","filterFactory","filterPosition","keyField","pagination","paginationFactory","pageStartIndex","sizePerPage","hideSizePerPage","hidePageListOnlyOnePage","App","footerComponent","isFullPageLayout","prevProps","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translations","zh","ns","defaultNS","keySeparator","interpolation","escapeValue","detection","Boolean","location","ReactDOM","render","basename","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36de4541.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className=\"footer\">\n        <div className=\"d-sm-flex justify-content-center justify-content-sm-between py-2\">\n          <span className=\"text-muted text-center text-sm-left d-block d-sm-inline-block\">Copyright © <a href=\"https://github.com/edgogo\" target=\"_blank\" rel=\"noopener noreferrer\">EdgoGo IOT Tech </a>2022</span>\n          <span className=\"float-none float-sm-right d-block mt-1 mt-sm-0 text-center\">Cloud Anywhere <a href=\"https://github.com/edgogo/\" target=\"_blank\" rel=\"noopener noreferrer\"> Edge Cloud console </a>  </span>\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","/*******************************************************************************\r\n * Copyright © 2022-2029 EdgeGo, Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n *\r\n * @author: EdgeGo, <xgtian@163.com>\r\n *******************************************************************************/\r\nimport React  from \"react\";\r\nimport {components} from \"react-select\";\r\nimport \"@fortawesome/fontawesome-free/css/all.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.css\";\r\n\r\nexport const IndicatorsContainer = props => {\r\n    return (\r\n        <div style={{ background: '#F5F5F5' }}>\r\n            <components.IndicatorsContainer {...props} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const deleteIcon = function(cell, formatterParams, onRendered){ //plain text value\r\n    return '<div class=\"trashIconBtn\"><i class=\"fa fa-times\" style=\"font-size: 20px;\"></i></div>';\r\n};\r\n\r\nexport const menuIcon = function(cell, formatterParams, onRendered){ //plain text value\r\n    return '<div class=\"addIconBtn\"><i class=\"fa fa-ellipsis-v\" style=\"font-size: 20px;\"></i></div>';\r\n};\r\n\r\nexport const linkIcon = function(cell, formatterParams, onRendered){ //plain text value\r\n    return '<div class=\"addIconBtn\"><i class=\"fa fa-link\" style=\"font-size: 20px;\"></i></div>';\r\n};\r\n","/*******************************************************************************\r\n * Copyright © 2022-2029 EdgeGo, Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n *\r\n * @author: EdgeGo, <xgtian@163.com>\r\n *******************************************************************************/\r\nimport React from 'react';\r\nimport '@trendmicro/react-modal/dist/react-modal.css';\r\nimport Modal from '@trendmicro/react-modal';\r\nimport { ReactTabulator } from \"react-tabulator\";\r\nimport \"react-tabulator/css/tabulator_simple.css\";\r\nimport {Col, Grid, Row} from \"react-flexbox-grid\";\r\nimport {deleteIcon,} from \"../shared/utils\";\r\nimport validator from 'validator';\r\nimport {Button} from 'uiw';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Notify from '@uiw/react-notify';\r\nimport {withTranslation} from \"react-i18next\";\r\n\r\nvar validateFQDN = function(cell, value, parameters){\r\n    //cell - the cell component for the edited cell\r\n    //value - the new input value of the cell\r\n    //parameters - the parameters passed in with the validator\r\n    if(cell.getField() === \"ipaddress\")\r\n    {\r\n        //console.log(validator.isURL(value) || validator.isIP(value) || validator.isFQDN(value));\r\n        return  validator.isIP(value) || validator.isFQDN(value);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nclass CloudModal extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            nodes:[{ipaddress :\"0.0.0.0\",nodetype :\"master\"}],\r\n            cloudName: \"\",\r\n            cloudRegion :  \"\",\r\n            sshPassword: \"\",\r\n            sshUser: \"root\",\r\n            sshPort: 22,\r\n            errorMessage: \"\",\r\n            isMore: false,\r\n            boxHeight: \"540px\",\r\n            moreIcon: \"down\",\r\n            validated: false,\r\n            sshKeyPath: \"~/.ssh/id_rsa\",\r\n            sshCertPath: \"\",\r\n            sshPassphrase: \"\",\r\n            sshAgentAuth : \"Disable\"\r\n        };\r\n\r\n        this.clusterVersionOptions = [{value:'Stable',label:'Stable'},{value:'Latest',label:'Latest'}];\r\n\r\n        this.nodeTblRef = React.createRef();\r\n        this.cloudNameRef = React.createRef();\r\n        this.sshUserRef = React.createRef();\r\n        this.sshPasswordRef = React.createRef();\r\n        this.sshPortRef = React.createRef();\r\n        this.cloudFormRef =  React.createRef();\r\n        this.clouldRegionRef = React.createRef();\r\n\r\n        this.sshKeyPathRef = React.createRef();\r\n        this.sshCertPathRef = React.createRef();\r\n        this.sshPassphraseRef = React.createRef();\r\n        this.sshAgentAuthRef = React.createRef();\r\n\r\n        this.handleCloudAddSubmit = this.handleCloudAddSubmit.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleAddNodeIP = this.handleAddNodeIP.bind(this);\r\n        this.handleCloudNameChange = this.handleCloudNameChange.bind(this);\r\n        this.handleSshAccountChange = this.handleSshAccountChange.bind(this);\r\n        this.handleSshPowordChange = this.handleSshPowordChange.bind(this);\r\n        this.handleSshPortChange = this.handleSshPortChange.bind(this);\r\n        this.setMoreSshInfo = this.setMoreSshInfo.bind(this);\r\n\r\n        this.handleSshkeyPathChange = this.handleSshkeyPathChange.bind(this);\r\n        this.handleSshCertPathChange = this.handleSshCertPathChange.bind(this);\r\n        this.handleSshPassphraseChange = this.handleSshPassphraseChange.bind(this);\r\n        this.handleSshAgentAuthChange = this.handleSshAgentAuthChange.bind(this);\r\n        this.handleCloudRegionChange = this.handleCloudRegionChange.bind(this);\r\n    }\r\n\r\n    handleSshkeyPathChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {sshKeyPath:inputValue}});\r\n    }\r\n\r\n    handleSshCertPathChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {sshCertPath:inputValue}});\r\n    }\r\n\r\n    handleCloudRegionChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {cloudRegion:inputValue}});\r\n    }\r\n\r\n    handleSshPassphraseChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {sshPassphrase:inputValue}});\r\n    }\r\n\r\n    handleSshAgentAuthChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {sshAgentAuth:inputValue}});\r\n    }\r\n\r\n    setMoreSshInfo()\r\n    {\r\n        if (this.state.isMore === true)\r\n        {\r\n            this.setState((state) => {return {isMore : false,boxHeight : \"540px\" ,moreIcon: \"down\"}});\r\n        }\r\n        else\r\n        {\r\n            this.setState((state) => {return {isMore : true,boxHeight : \"730px\",moreIcon: \"up\"}});\r\n        }\r\n    }\r\n\r\n    async pingHost(host,clusterId,sshInfo)\r\n    {\r\n        let pinged = false;\r\n        await fetch('/cluster/ping/' + clusterId + '/' + host,\r\n            {\r\n                method: \"POST\",\r\n                mode: \"no-cors\",\r\n                body: JSON.stringify(sshInfo),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then( response => {\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response statusText\r\n                    return Promise.reject();\r\n                }\r\n                return response.text();\r\n            })\r\n            .then((textData) =>\r\n            {\r\n                if (textData === \"OK\")\r\n                    pinged = true;\r\n                //console.log(textData);\r\n            })\r\n            .catch(error => {\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n        return pinged;\r\n    }\r\n\r\n    nodeOptions = {\r\n        height:300,\r\n        //\"table-borderless\": true,\r\n        //headerVisible:false,\r\n        resizableColumns:true,\r\n        persistence:false,\r\n        //movableRows: true,\r\n        //resizableRows: true,\r\n        selectable:0,\r\n        layout:\"fitColumns\",\r\n        locale:true,\r\n        langs:{\r\n            \"zh-cn\":{ //Chinese language definition\r\n                \"columns\":{\r\n                    \"cluster\":\"云\",\r\n                },\r\n                \"pagination\":{\r\n                    \"first\":\"首页\",\r\n                    \"first_title\":\"首页\",\r\n                    \"last\":\"最后页\",\r\n                    \"last_title\":\"最后页\",\r\n                    \"prev\":\"前一页\",\r\n                    \"prev_title\":\"前一页\",\r\n                    \"next\":\"下一页\",\r\n                    \"next_title\":\"下一页\",\r\n                    \"all\":\"全部\",\r\n                    \"page_size\":\"行数\",\r\n                },\r\n                \"headerFilters\":{\r\n                    \"default\":\"filter ...\",\r\n                    \"columns\":{\r\n                        \"ipaddress\":\"过滤主机地址 ...\",\r\n                        \"hostname\":\"过滤主机名称 ...\",\r\n                        \"roles\":\"过滤主机角色 ...\",\r\n                        \"status\":\"过滤主机运行状态 ...\",\r\n                    }\r\n                },\r\n                \"custom\":{\r\n                    \"worker\":\"工作节点\",\r\n                    \"master\":\"控制节点\",\r\n                    \"Ready\" : \"就绪\",\r\n                    \"NotReady\" : \"离线\"\r\n                },\r\n            },\r\n            \"en\":{ //Chinese language definition\r\n                \"custom\":{\r\n                    \"worker\":\"worker\",\r\n                    \"master\":\"master\",\r\n                    \"Ready\" : \"Ready\",\r\n                    \"NotReady\" : \"NotReady\"\r\n                },\r\n            }\r\n        },\r\n    };\r\n\r\n    nodeColumns =\r\n        [\r\n            /* {formatter:\"rowSelection\", width:5,titleFormatter:\"rowSelection\", hozAlign:\"center\", headerSort:false, cellClick:function(e, cell){\r\n                     cell.getRow().toggleSelect();\r\n                 }},*/\r\n            {width:5,hozAlign:\"center\",formatter:\"rownum\",visible:true, col:\"blue\"},\r\n            { title: this.props.t(\"Node Address\"), field: \"ipaddress\" ,formatter:\"textarea\" ,editor: \"input\",visible:true,headerHozAlign:\"center\",hozAlign: \"center\",validator:[\r\n                    {\r\n                        type: validateFQDN,\r\n                        parameters:{\r\n                            divisor:5,\r\n                        }\r\n                    }\r\n                ],\r\n                editorParams:{\r\n                    search:true,\r\n                    //mask:\"AAA-999.\",\r\n                    selectContents:true,\r\n                    elementAttributes:{\r\n                        maxlength:\"30\",\r\n                    }\r\n                }\r\n            },\r\n            { title: this.props.t(\"Node Type\"), field: \"nodetype\" ,hozAlign: \"center\",editor:\"select\",editorParams:{\r\n                    values:{\r\n                        \"master\" : this.props.t(\"master\"),\r\n                        \"worker\":  this.props.t(\"worker\"),\r\n                    },\r\n                    defaultValue: \"master\"\r\n                },visible:true,headerHozAlign:\"center\",formatter:function(cell, formatterParams, onRendered){\r\n                    if (cell.getValue() === \"worker\")\r\n                        return cell.getRow().getTable().getLang().custom.worker;\r\n                    else\r\n                        return cell.getRow().getTable().getLang().custom.master;\r\n                }} ,\r\n            { formatter:deleteIcon,width:10 ,hozAlign: \"center\",\r\n                cellClick:function(e, cell) {\r\n                    if (cell.getRow().getTable().getDataCount() > 1) {\r\n                        cell.getTable().deleteRow(cell.getRow());\r\n                    }\r\n                    else\r\n                    {\r\n                        if (cell.getRow().getTable().getDataCount() ===1)\r\n                        {\r\n                            cell.getTable().deleteRow(cell.getRow());\r\n                            cell.getTable().addRow({ipaddress :\"0.0.0.0\",nodetype :\"master\"});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ];\r\n\r\n    handleClose()\r\n    {\r\n        this.props.handleClose();\r\n        this.setState((state) => {return {nodes:[{ipaddress :\"0.0.0.0\",nodetype :\"master\"}],\r\n            cloudName: \"\",\r\n            sshPassword: \"\",\r\n            cloudRegion: \"\",\r\n            sshUser: \"root\",\r\n            sshPort: 22,\r\n            isMore: false,\r\n            moreIcon: \"down\",\r\n            validated: false,\r\n        }})\r\n        ;\r\n    }\r\n\r\n    async handleCloudAddSubmit()\r\n    {\r\n        this.setState((state) => {return {validated : true}});\r\n\r\n        if (this.state.cloudName === undefined  || this.state.cloudName === \"\")\r\n        {\r\n            this.cloudNameRef.current.focus();\r\n            return;\r\n        }\r\n\r\n        if (this.state.cloudRegion === undefined  || this.state.cloudRegion === \"\")\r\n        {\r\n            this.clouldRegionRef.current.focus();\r\n            return;\r\n        }\r\n\r\n        if (this.state.sshUser === undefined  || this.state.sshUser === \"\")\r\n        {\r\n            this.sshUserRef.current.focus();\r\n            return;\r\n        }\r\n\r\n        if (this.state.isMore === false)\r\n        {\r\n            if ((this.state.sshPassword === undefined  || this.state.sshPassword === \"\") && this.state.isMore === false)\r\n            {\r\n                this.sshPasswordRef.current.focus();\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.state.isMore === true)\r\n        {\r\n            if (this.state.sshKeyPath === undefined  || this.state.sshKeyPath === \"\")\r\n            {\r\n                this.sshKeyPathRef.current.focus();\r\n                return;\r\n            }\r\n\r\n            if (this.state.sshPort === undefined  || this.state.sshPort === \"\")\r\n            {\r\n                this.sshPortRef.current.focus();\r\n                return;\r\n            }\r\n        }\r\n        let masterips = [];\r\n        let workerips = [];\r\n        let nodes = this.nodeTblRef.current.table.getData() ;\r\n        let qualifiedNodes = [];\r\n\r\n        for(let i=0; i< nodes.length;i++)\r\n        {\r\n            if(nodes[i].ipaddress !== undefined &&  nodes[i].ipaddress !== \"\" && nodes[i].ipaddress !== \"0.0.0.0\" && nodes[i].ipaddress !== \"\" )\r\n            {\r\n                qualifiedNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        for(let i=0; i < qualifiedNodes.length;i++)\r\n        {\r\n            if(qualifiedNodes[i].nodetype === \"master\")\r\n            {\r\n                masterips.push(qualifiedNodes[i].ipaddress);\r\n            }\r\n            else\r\n            {\r\n                workerips.push(qualifiedNodes[i].ipaddress);\r\n            }\r\n        }\r\n\r\n        if (masterips.length == 0 && workerips .length == 0)\r\n        {\r\n            this.handleClose();\r\n            return;\r\n        }\r\n\r\n        let sshInfo  = {};\r\n        if (this.state.sshPassword !== \"\")\r\n        {\r\n            sshInfo = {\r\n                \"ssh-port\":  this.state.sshPort + \"\",\r\n                \"ssh-user\":  this.state.sshUser,\r\n                \"ssh-password\":  this.state.sshPassword ,\r\n                \"ssh-agent-auth\":  this.state.sshAgentAuth !== \"Disable\"\r\n            }\r\n        }\r\n        else\r\n        {\r\n            sshInfo = {\r\n                \"ssh-port\":  this.state.sshPort + \"\",\r\n                \"ssh-user\":  this.state.sshUser,\r\n                \"ssh-key-path\" : this.state.sshKeyPath,\r\n                \"ssh-cert-path\" :  this.state.sshCertPath,\r\n                \"ssh-key-passphrase\" : this.state.sshPassphrase,\r\n                \"ssh-agent-auth\":  this.state.sshAgentAuth !== \"Disable\"\r\n            }\r\n        }\r\n\r\n        let masterIPStr = '';\r\n        let hostPinged = false;\r\n        if (masterips.length > 0)\r\n        {\r\n            for(let i = 0; i< masterips.length;i++)\r\n            {\r\n                if(i !== masterips.length -1)\r\n                    masterIPStr = masterIPStr + masterips[i] + ',';\r\n                else\r\n                    masterIPStr = masterIPStr  + masterips[i] + '';\r\n\r\n                hostPinged = await this.pingHost(masterips[i],this.state.cloudName,sshInfo);\r\n                 if(hostPinged === false)\r\n                 {\r\n                     Notify.error({  description: this.props.t(\"Host \")  + masterips[i] + this.props.t(\" not reachable,Please check host address,account and password if correct\") , duration: 10 ,placement : \"topRight\"});\r\n                     return;\r\n                 }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Notify.info({  description:  this.props.t(\"At least set one master node to cloud\") , duration: 10 ,placement : \"topRight\"});\r\n            return;\r\n        }\r\n\r\n        let workerIPStr = '';\r\n        if (workerips.length > 0)\r\n        {\r\n            for(let i = 0; i< workerips.length;i++)\r\n            {\r\n                if (i !== workerips.length -1)\r\n                    workerIPStr = workerIPStr + workerips[i] + ',';\r\n                else\r\n                    workerIPStr = workerIPStr  + workerips[i] + '';\r\n\r\n                hostPinged = await this.pingHost(workerips[i],this.state.cloudName,sshInfo);\r\n                if(hostPinged === false)\r\n                {\r\n                    Notify.error({  description: this.props.t(\"Host \")  + workerips[i] + this.props.t(\" not reachable,Please check host address,account and password if correct\") , duration: 10 ,placement : \"topRight\"});\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        let createPacket = {\r\n            \"id\": this.state.cloudName ,\r\n            \"name\":  this.state.cloudName ,\r\n            \"region\" : this.state.cloudRegion ,\r\n            \"master\":  masterips.length  + '',\r\n            \"worker\":  workerips.length + '',\r\n            \"context-name\":  this.state.cloudName,\r\n            \"ssh-port\":  this.state.sshPort + \"\",\r\n            \"ssh-user\":  this.state.sshUser,\r\n            \"ssh-password\":  this.state.sshPassword ,\r\n            \"ssh-key-path\" : this.state.sshPassword !== \"\"  ? \"\" : this.state.sshKeyPath,\r\n            \"ssh-cert-path\" : this.state.sshPassword !== \"\"  ? \"\" : this.state.sshCertPath,\r\n            \"ssh-key-passphrase\" : this.state.sshPassword !== \"\"  ? \"\" : this.state.sshPassphrase,\r\n            \"ssh-agent-auth\":  this.state.sshAgentAuth !== \"Disable\" ,\r\n            \"options\": { \"master-ips\": masterIPStr , \"worker-ips\" : workerIPStr },\r\n            \"provider\":\"native\",\r\n            \"type\":\"cluster\",\r\n            \"cluster-cidr\":\"10.42.0.0/16\",\r\n            \"k3s-channel\":\"stable\",\r\n            \"enable\": [\"dashboard\"],\r\n            \"k3s-install-script\":\"http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh\",\r\n            \"k3s-install-mirror\":\"INSTALL_K3S_MIRROR=cn\",\r\n            \"docker-script\":\"https://get.docker.com | bash -s docker --mirror Aliyun\",\r\n            \"cluster\":true,\r\n        }\r\n\r\n        let cloudName = this.state.cloudName;\r\n        this.handleClose();\r\n        this.props.handleProcessingBegin();\r\n        await fetch('/cluster/' + cloudName , {\r\n            method: 'POST' ,\r\n            body: JSON.stringify(createPacket),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => {\r\n                return response.text();\r\n            })\r\n            .then((textData) => {\r\n                //curRow.update({'readvalue': resultText});\r\n                //console.log(textData);\r\n                if (textData === \"OK\")\r\n                {\r\n                    Notify.success({  description: this.props.t('Succeed to create cloud!'), duration: 10 ,placement : \"topRight\"});\r\n                }\r\n                else\r\n                {\r\n                    Notify.error({ description: this.props.t('Failed to create cloud!'),duration: 10 ,placement : \"topRight\"});\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('There was an error!' , error.toString());\r\n            });\r\n        this.props.handleProcessingEnd();\r\n        this.setState((state) => {return { nodes:[{ipaddress : \"0.0.0.0\",nodetype :\"master\"}]}});\r\n    }\r\n\r\n    handleAddNodeIP()\r\n    {\r\n        this.nodeTblRef.current.table.addRow({ipaddress :\"0.0.0.0\",nodetype :\"master\"});\r\n    }\r\n\r\n    handleCloudNameChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {cloudName:inputValue}});\r\n    }\r\n\r\n    handleSshAccountChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {sshUser:inputValue}});\r\n    }\r\n\r\n    handleSshPowordChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {sshPassword:inputValue}});\r\n    }\r\n\r\n    handleSshPortChange(e)\r\n    {\r\n        e.persist();\r\n        //console.log(e.target.value);\r\n        let inputValue = e.target.value;\r\n        this.setState((state) => {return {sshPort:inputValue}});\r\n    }\r\n\r\n    // componentWillReceiveProps(nextProps)\r\n    //{\r\n    //console.log(this.props.profileData.name);\r\n    //console.log(this.props.isAdd);\r\n    //if (this.props.profileData.name !== nextProps.profileData.name)\r\n    //{\r\n    // if (this.props.profileData.name !== undefined && this.props.isAdd === false)\r\n    //   this.setState((state) => {return {content: YAML.stringify(this.props.profileData)}});\r\n    // else\r\n    //     this.setState((state) => {return {content: \"\"}});\r\n    //}\r\n    //}\r\n\r\n    render () {\r\n        if (this.props.show === false) {\r\n            return null;\r\n        };\r\n\r\n        //let tittle = this.props.isAdd=== false ?  this.props.intl.formatMessage({ id: 'deviceprofile.edit' }) + ' '   +  this.props.profileData.name :  <FormattedMessage  id='deviceprofile.add'/>;\r\n        return (\r\n            <div>\r\n                <Modal size=\"large\" onClose={this.props.handleClose} disableOverlayClick={true}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>\r\n                            {this.props.t(\"Add Cloud\")}\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body padding>\r\n                        <Form ref={this.cloudFormRef} noValidate validated={this.state.validated}>\r\n                            <Grid fluid>\r\n                                <Row>\r\n                                    <Col xs={4} md={2}>\r\n                                        {this.props.t(\"Cloud Name\")}<font color={\"red\"} >*</font>\r\n                                    </Col>\r\n                                    <Col xs={20} md={10} >\r\n                                        <input\r\n                                            required\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            placeholder={this.props.t(\"Cloud Name\")}\r\n                                            value ={this.state.cloudName}\r\n                                            ref={this.cloudNameRef}\r\n                                            pattern=\"[a-zA-Z0-9]{8}\"\r\n                                            onChange={(e) => this.handleCloudNameChange(e)}\r\n                                        />\r\n                                        <Form.Control.Feedback  type=\"invalid\" >{this.props.t(\"Please input cloud name\")}</Form.Control.Feedback>\r\n                                    </Col>\r\n                                </Row>\r\n                                <p></p>\r\n                                <Row>\r\n                                    <Col xs={4} md={2}>\r\n                                        {this.props.t(\"Region\")}<font color={\"red\"} >*</font>\r\n                                    </Col>\r\n                                    <Col xs={20} md={10} >\r\n                                        <input\r\n                                            required\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            placeholder={this.props.t(\"Region\")}\r\n                                            value ={this.state.cloudRegion}\r\n                                            ref={this.clouldRegionRef}\r\n                                            //pattern=\"^[a-z][A-Z0-9]{6}\"\r\n                                            onChange={(e) => this.handleCloudRegionChange(e)}\r\n                                        />\r\n                                        <Form.Control.Feedback  type=\"invalid\" >{this.props.t(\"Please input cloud region\")}</Form.Control.Feedback>\r\n                                    </Col>\r\n                                </Row>\r\n                                <p></p>\r\n                                <Row>\r\n                                    <Col xs={4} md={2}>\r\n                                        {this.props.t(\"Node Account\")}<font color={\"red\"} >*</font>\r\n                                    </Col>\r\n                                    <Col xs={20} md={10} >\r\n                                        <input\r\n                                            required\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            placeholder= {this.props.t(\"SSH Account Name\")}\r\n                                            value ={this.state.sshUser}\r\n                                            ref={this.sshUserRef}\r\n                                            onChange={(e) => this.handleSshAccountChange(e)}\r\n                                        />\r\n                                        <Form.Control.Feedback  type=\"invalid\" >{this.props.t(\"Please Input SSH Account Name\")}</Form.Control.Feedback>\r\n                                    </Col>\r\n                                </Row>\r\n                                <p></p>\r\n                                { this.state.isMore === false ? (\r\n                                    <Row>\r\n                                        <Col xs={4} md={2}>\r\n                                            {this.props.t(\"Node Password\")}  { this.state.isMore === false ? <font color={\"red\"} >*</font> : null}\r\n                                        </Col>\r\n                                        <Col xs={20} md={10} >\r\n                                            <input\r\n                                                required={!this.state.isMore}\r\n                                                type=\"password\"\r\n                                                className=\"form-control\"\r\n                                                placeholder={this.props.t(\"SSH Account Password\")}\r\n                                                value ={this.state.sshPassword}\r\n                                                ref={this.sshPasswordRef}\r\n                                                onChange={(e) => this.handleSshPowordChange(e)}\r\n                                            /><Form.Control.Feedback  type=\"invalid\" >{this.props.t(\"Please Input SSH Account Password\")} </Form.Control.Feedback>\r\n                                        </Col>\r\n                                    </Row>) : null}\r\n                                <p></p>\r\n                                <Row end={\"xs\"}>\r\n                                    <Col xs={24} md={12} align ={\"right\"}>\r\n                                        <Button icon={this.state.moreIcon} type=\"light\" onClick={this.setMoreSshInfo}></Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <p></p>\r\n                                { this.state.isMore ===true ?\r\n                                    (\r\n                                        <div>\r\n                                            <Row>\r\n                                                <Col xs={4} md={2}>\r\n                                                    <Form.Label>\r\n                                                        {this.props.t(\"SSH Key Path\")}{ this.state.isMore === true ? <font color={\"red\"} >*</font> : null}\r\n                                                    </Form.Label>\r\n                                                </Col>\r\n                                                <Col xs={20} md={10} >\r\n                                                    <input\r\n                                                        type=\"input\"\r\n                                                        className=\"form-control\"\r\n                                                        placeholder={this.props.t(\"SSH private key path\")}\r\n                                                        required\r\n                                                        value ={this.state.sshKeyPath}\r\n                                                        ref={this.sshKeyPathRef}\r\n                                                        onChange={(e) => this.handleSshkeyPathChange(e)}\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {this.props.t(\"Please input SSH private key path\")}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <p></p>\r\n                                            <Row>\r\n                                                <Col xs={4} md={2}>\r\n                                                    <Form.Label>\r\n                                                        {this.props.t(\"SSH Cert Path\")}\r\n                                                    </Form.Label>\r\n                                                </Col>\r\n                                                <Col xs={20} md={10} >\r\n                                                    <input\r\n                                                        type=\"input\"\r\n                                                        className=\"form-control\"\r\n                                                        placeholder={this.props.t(\"SSH private key certificate path\")}\r\n                                                        value ={this.state.sshCertPath}\r\n                                                        onChange={(e) => this.handleSshCertPathChange(e)}\r\n                                                        ref={this.sshCertPathRef}\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {this.props.t(\"Please input SSH private key certificate path\")}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <p></p>\r\n                                            <Row>\r\n                                                <Col xs={4} md={2}>\r\n                                                    <Form.Label>\r\n                                                        {this.props.t(\"SSH Key Passphrase\")}\r\n                                                    </Form.Label>\r\n                                                </Col>\r\n                                                <Col xs={20} md={10} >\r\n                                                    <input\r\n                                                        type=\"input\"\r\n                                                        className=\"form-control\"\r\n                                                        placeholder={this.props.t(\"SSH Key Passphrase\")}\r\n                                                        value ={this.state.sshPassphrase}\r\n                                                        ref={this.sshPassphraseRef}\r\n                                                        onChange={(e) => this.handleSshPassphraseChange(e)}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <p></p>\r\n                                            <Row>\r\n                                                <Col xs={4} md={2}>\r\n                                                    <Form.Label>\r\n                                                        {this.props.t(\"SSH Agent Auth\")}\r\n                                                    </Form.Label>\r\n                                                </Col>\r\n                                                <Col xs={20} md={10} >\r\n                                                    <Form.Control\r\n                                                        as=\"select\"\r\n                                                        className=\"form-control\"\r\n                                                        placeholder={this.props.t(\"SSH Agent Auth\")}\r\n                                                        value ={this.state.sshAgentAuth}\r\n                                                        ref={this.sshAgentAuthRef}\r\n                                                        onChange={(e) => this.handleSshAgentAuthChange(e)}\r\n                                                    >\r\n                                                        <option value=\"Disable\">{this.props.t(\"Disable\")}</option>\r\n                                                        <option value=\"Enable\">{this.props.t(\"Enable\")}</option>\r\n                                                    </Form.Control>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <p></p>\r\n                                            <Row>\r\n                                                <Col xs={4} md={2}>\r\n                                                    {this.props.t(\"Node Port\")} { this.state.isMore === true ? <font color={\"red\"} >*</font> : null}\r\n                                                </Col>\r\n                                                <Col xs={20} md={10} >\r\n                                                    <input\r\n                                                        placeholder=\"Node ssh Port number\"\r\n                                                        type=\"number\" min={22} max={49999}\r\n                                                        className=\"form-control\"\r\n                                                        value={this.state.sshPort}\r\n                                                        ref={this.sshPortRef}\r\n                                                        onChange={(e) => this.handleSshPortChange(e)}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </div>\r\n                                    )\r\n                                    : (null)\r\n                                }\r\n                                <p></p>\r\n                                <Row end=\"xs\">\r\n                                    <Col xs={24} md={12} align ={\"right\"}>\r\n                                        <div className=\"addIconBtn\">\r\n                                            <i className=\"fa fa-plus\" title= {this.props.t(\"Add Node\")} aria-hidden=\"true\" /*onClick={this.handleAddNodeIP} */ onClick= { ()=>this.handleAddNodeIP() } > </i>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <p></p>\r\n                                <Row>\r\n                                    <Col xs={4} md={2}>\r\n                                        {this.props.t(\"Nodes\")}<font color={\"red\"} >*</font>\r\n                                    </Col>\r\n                                    <Col xs={20} md={10} >\r\n                                        <ReactTabulator\r\n                                            //className=\"border-light\"\r\n                                            ref={ this.nodeTblRef}\r\n                                            columns={this.nodeColumns}\r\n                                            data={this.state.nodes}\r\n                                            options={this.nodeOptions}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </Grid>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={this.handleClose} >{this.props.t(\"Cancel\")}</Button >\r\n                        <Button onClick={this.handleCloudAddSubmit} >{this.props.t(\"Submit\")}</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation() (CloudModal);\r\n","/*******************************************************************************\r\n * Copyright © 2022-2029 EdgeGo, Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n *\r\n * @author: EdgeGo, <xgtian@163.com>\r\n *******************************************************************************/\r\nimport React from 'react';\r\nimport '@trendmicro/react-modal/dist/react-modal.css';\r\nimport Modal from '@trendmicro/react-modal';\r\nimport { ReactTabulator } from \"react-tabulator\";\r\nimport \"react-tabulator/css/tabulator_simple.css\";\r\nimport {Box} from \"grommet\";\r\nimport {Col, Grid, Row} from \"react-flexbox-grid\";\r\nimport {deleteIcon} from \"../shared/utils\";\r\nimport validator from \"validator\";\r\nimport {Button} from 'uiw';\r\nimport Notify from '@uiw/react-notify';\r\nimport {withTranslation} from \"react-i18next\";\r\n\r\nvar validateFQDN = function(cell, value, parameters){\r\n    //cell - the cell component for the edited cell\r\n    //value - the new input value of the cell\r\n    //parameters - the parameters passed in with the validator\r\n    if(cell.getField() === \"ipaddress\")\r\n    {\r\n        //console.log(validator.isURL(value) || validator.isIP(value) || validator.isFQDN(value));\r\n        return validator.isURL(value) || validator.isIP(value) || validator.isFQDN(value);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nclass NodeModal extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            nodes:[{ipaddress :\"0.0.0.0\",nodetype :\"master\"}],\r\n            errorMessage: \"\"\r\n        };\r\n\r\n        this.clusterVersionOptions = [{value:'Stable',label:'Stable'},{value:'Latest',label:'Latest'}];\r\n\r\n        this.nodeTblRef = React.createRef();\r\n        this.cloudNameRef = React.createRef();\r\n\r\n        this.handleAddNodesSubmit = this.handleAddNodesSubmit.bind(this);\r\n        this.handleAddNodeIP = this.handleAddNodeIP.bind(this);\r\n    }\r\n\r\n    nodeOptions = {\r\n        height:380,\r\n        //headerVisible:false,\r\n        resizableColumns:true,\r\n        persistence:false,\r\n        //movableRows: true,\r\n        //resizableRows: true,\r\n        selectable:0,\r\n        layout:\"fitColumns\",\r\n        locale:true,\r\n        langs:{\r\n            \"zh-cn\":{ //Chinese language definition\r\n                \"columns\":{\r\n                    \"cluster\":\"云\",\r\n                },\r\n                \"pagination\":{\r\n                    \"first\":\"首页\",\r\n                    \"first_title\":\"首页\",\r\n                    \"last\":\"最后页\",\r\n                    \"last_title\":\"最后页\",\r\n                    \"prev\":\"前一页\",\r\n                    \"prev_title\":\"前一页\",\r\n                    \"next\":\"下一页\",\r\n                    \"next_title\":\"下一页\",\r\n                    \"all\":\"全部\",\r\n                    \"page_size\":\"行数\",\r\n                },\r\n                \"headerFilters\":{\r\n                    \"default\":\"filter ...\",\r\n                    \"columns\":{\r\n                        \"ipaddress\":\"过滤主机地址 ...\",\r\n                        \"hostname\":\"过滤主机名称 ...\",\r\n                        \"roles\":\"过滤主机角色 ...\",\r\n                        \"status\":\"过滤主机运行状态 ...\",\r\n                    }\r\n                },\r\n                \"custom\":{\r\n                    \"worker\":\"工作节点\",\r\n                    \"master\":\"控制节点\",\r\n                    \"Ready\" : \"就绪\",\r\n                    \"NotReady\" : \"离线\"\r\n                },\r\n            },\r\n            \"en\":{ //Chinese language definition\r\n                \"custom\":{\r\n                    \"worker\":\"worker\",\r\n                    \"master\":\"master\",\r\n                    \"Ready\" : \"Ready\",\r\n                    \"NotReady\" : \"NotReady\"\r\n                },\r\n            }\r\n        },\r\n    };\r\n\r\n    nodeColumns =\r\n        [\r\n            /* {formatter:\"rowSelection\", width:5,titleFormatter:\"rowSelection\", hozAlign:\"center\", headerSort:false, cellClick:function(e, cell){\r\n                     cell.getRow().toggleSelect();\r\n                 }},*/\r\n            {width:5,hozAlign:\"center\",formatter:\"rownum\",visible:true, col:\"blue\"},\r\n            { title: this.props.t(\"Node Address\"), field: \"ipaddress\" ,formatter:\"textarea\" ,hozAlign: \"center\",editor: \"input\",visible:true,headerHozAlign:\"center\",validator:[\r\n                {\r\n                    type: validateFQDN,\r\n                    parameters:{\r\n                        divisor:5,\r\n                    }\r\n                }\r\n            ]},\r\n            { title: this.props.t(\"Node Type\"), field: \"nodetype\" ,hozAlign: \"center\",editor:\"select\",editorParams:{\r\n                    values:{\r\n                        \"master\" :this.props.t(\"master\"),\r\n                        \"worker\":this.props.t(\"worker\"),\r\n                    }\r\n                },visible:true,headerHozAlign:\"center\",formatter:function(cell, formatterParams, onRendered){\r\n                    if (cell.getValue() === \"worker\")\r\n                        return cell.getRow().getTable().getLang().custom.worker;\r\n                    else\r\n                        return cell.getRow().getTable().getLang().custom.master;\r\n                }} ,\r\n            {\r\n                formatter: deleteIcon, width: 10, hozAlign: \"center\",\r\n                cellClick: function (e, cell) {\r\n                    if (cell.getRow().getTable().getDataCount() > 1) {\r\n                        cell.getTable().deleteRow(cell.getRow());\r\n                    } else {\r\n                        if (cell.getRow().getTable().getDataCount() === 1) {\r\n                            cell.getTable().deleteRow(cell.getRow());\r\n                            cell.getTable().addRow({ipaddress: \"0.0.0.0\", nodetype: \"master\"});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ];\r\n\r\n    async pingHost(clusterId,host)\r\n    {\r\n        let pinged = false;\r\n        await fetch('/cluster/ping/' + clusterId + '/' + host,\r\n            {\r\n                method: \"POST\",\r\n                mode: \"no-cors\",\r\n                body: JSON.stringify('{}'),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then( response => {\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response statusText\r\n                    return Promise.reject();\r\n                }\r\n                return response.text();\r\n            })\r\n            .then((textData) =>\r\n            {\r\n                if (textData === \"OK\")\r\n                    pinged = true;\r\n            })\r\n            .catch(error => {\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n        return pinged;\r\n    }\r\n\r\n   async handleAddNodesSubmit()\r\n    {\r\n        let cloudName = this.props.cloudName;\r\n        let cloudId = this.props.cloudId;\r\n        let masterips = [];\r\n        let workerips = [];\r\n\r\n        let nodes = this.nodeTblRef.current.table.getData() ;\r\n        let qualifiedNodes = [];\r\n        for(let i=0; i< nodes.length;i++)\r\n        {\r\n            if(nodes[i].ipaddress !== undefined  &&  nodes[i].ipaddress !== \"\" && nodes[i].ipaddress !== \"0.0.0.0\" )\r\n            {\r\n                qualifiedNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        for(let i=0; i < qualifiedNodes.length;i++)\r\n        {\r\n            if(qualifiedNodes[i].nodetype === \"master\")\r\n            {\r\n                masterips.push(qualifiedNodes[i].ipaddress);\r\n            }\r\n            else\r\n            {\r\n                workerips.push(qualifiedNodes[i].ipaddress);\r\n            }\r\n        }\r\n\r\n        if (masterips.length == 0 && workerips .length == 0)\r\n        {\r\n            this.props.handleClose();\r\n            return;\r\n        }\r\n\r\n        let hostPinged = false;\r\n        let packStr = '{ \"id\" : \"' + cloudId  + '\" , \"name\": \"' + cloudName + '\", \"provider\": \"native\",\"options\":{\"master-ips\": ' ;\r\n        let masterIPStr = '';\r\n        if (masterips.length > 0)\r\n        {\r\n            masterIPStr = '\"';\r\n            for(let i = 0; i< masterips.length;i++)\r\n            {\r\n                if (i !== masterips.length -1)\r\n                    masterIPStr = masterIPStr + masterips[i] + ','\r\n                else\r\n                    masterIPStr = masterIPStr  + masterips[i] + '\",'\r\n\r\n                hostPinged = await this.pingHost(cloudId,masterips[i]);\r\n                if(hostPinged === false)\r\n                {\r\n                    Notify.error({  description: this.props.t(\"Host \")  + masterips[i] + this.props.t(\" not reachable,Please check host address,account and password if correct\") , duration: 10 ,placement : \"topRight\"});\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            masterIPStr = '\"\",';\r\n        }\r\n        packStr = packStr + masterIPStr + '\"worker-ips\": ';\r\n\r\n        let workerIPStr = '';\r\n        if (workerips.length > 0)\r\n        {\r\n            workerIPStr = '\"';\r\n            for(let i = 0; i< workerips.length;i++)\r\n            {\r\n                if (i !== workerips.length -1)\r\n                    workerIPStr = workerIPStr + workerips[i] + ','\r\n                else\r\n                    workerIPStr = workerIPStr  + workerips[i] + '\"'\r\n\r\n                hostPinged = await this.pingHost(cloudId,workerips[i]);\r\n                if(hostPinged === false)\r\n                {\r\n                    Notify.error({  description: this.props.t(\"Host \")  + workerips[i] + this.props.t(\" not reachable,Please check host address,account and password if correct\") , duration: 10 ,placement : \"topRight\"});\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            workerIPStr = '\"\"';\r\n        }\r\n        packStr = packStr + workerIPStr + \" }}\";\r\n\r\n        this.props.handleClose();\r\n        this.props.handleProcessingBegin();\r\n        await fetch('/cluster/join/' + cloudName , {\r\n            method: 'POST' ,\r\n            body: packStr,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => {\r\n                return response.text();\r\n            })\r\n            .then((textData) => {\r\n                if (textData === \"OK\")\r\n                {\r\n                    this.props.handleProcessingEnd();\r\n                    Notify.success({  description: this.props.t('Succeed to join cloud'), duration: 10 ,placement : \"topRight\"});\r\n                }\r\n                else\r\n                {\r\n                    this.props.handleProcessingEnd();\r\n                    Notify.error({ description: this.props.t('failed to join cloud,error:') + textData,duration: 10 ,placement : \"topRight\"});\r\n                }\r\n            })\r\n            .catch(error => {\r\n                //console.error('There was an error!' , error.toString());\r\n                this.props.handleProcessingEnd();\r\n                Notify.error({ description: this.props.t('failed to join cloud,error:') + error.toString(),duration: 10 ,placement : \"topRight\"});\r\n            });\r\n    }\r\n\r\n    handleAddNodeIP()\r\n    {\r\n        this.nodeTblRef.current.table.addRow({ipaddress :\"0.0.0.0\",nodetype :\"master\"});\r\n    }\r\n\r\n\r\n    // componentWillReceiveProps(nextProps)\r\n    //{\r\n    //console.log(this.props.profileData.name);\r\n    //console.log(this.props.isAdd);\r\n    //if (this.props.profileData.name !== nextProps.profileData.name)\r\n    //{\r\n    // if (this.props.profileData.name !== undefined && this.props.isAdd === false)\r\n    //   this.setState((state) => {return {content: YAML.stringify(this.props.profileData)}});\r\n    // else\r\n    //     this.setState((state) => {return {content: \"\"}});\r\n    //}\r\n    //}\r\n\r\n    render () {\r\n        if (this.props.show === false) {\r\n            return null;\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <Modal size=\"sm\" onClose={this.props.handleClose} disableOverlayClick={true}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>\r\n                            {this.props.t(\"Add Node\")}\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body padding>\r\n                        <Box height=\"440px\">\r\n                            <Grid fluid>\r\n                                <p></p>\r\n                                <Row end=\"xs\">\r\n                                    <Col xs={24} md={12} align ={\"right\"}>\r\n                                        <div className=\"addIconBtn\">\r\n                                            <i className=\"fa fa-plus\" title= {this.props.t(\"Add Node\")} aria-hidden=\"true\"  onClick= { ()=>this.handleAddNodeIP() } > </i>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <p></p>\r\n                                <Row>\r\n                                    <Col xs={24} md={12} >\r\n                                        <ReactTabulator\r\n                                            className=\"border-light\"\r\n                                            ref={ this.nodeTblRef}\r\n                                            columns={this.nodeColumns}\r\n                                            data={this.state.nodes}\r\n                                            options={this.nodeOptions}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={this.props.handleClose} >{this.props.t(\"Cancel\")}</Button >\r\n                        <Button onClick={this.handleAddNodesSubmit} >{this.props.t(\"Submit\")}</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation() (NodeModal);\r\n","import React, { Component } from 'react'\n\nexport class Spinner extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"spinner-wrapper\">\n          <div className=\"donut\"></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Spinner\n","/*******************************************************************************\r\n * Copyright © 2022-2029 EdgeGo, Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n *\r\n * @author: EdgeGo, <xgtian@163.com>\r\n *******************************************************************************/\r\nimport React, { Component } from 'react';\r\nimport {Col , Grid , Row} from \"react-flexbox-grid\";\r\nimport {Card } from 'uiw';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport 'react-tabulator/lib/styles.css'; // required styles\r\n//import Tabulator from \"tabulator-tables\"; //import Tabulator library\r\nimport { ReactTabulator,reactFormatter } from \"react-tabulator\";\r\n//import \"react-tabulator/css/materialize/tabulator_materialize.min.css\";\r\nimport \"react-tabulator/css/bulma/tabulator_bulma.css\";\r\nimport {Box , Button , Grommet , Text , Tip} from \"grommet\";\r\n//import { menuIcon} from \"../shared/utils\";\r\nimport {Add, SettingsOption, Close, Cluster,Refresh,FormClose} from \"grommet-icons\";\r\nimport CloudModal  from './CloudModal.js';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport  BootstrapTable  from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\r\nimport NodeModal from \"./NodeModal\";\r\nimport Spinner from \"../shared/Spinner.js\"\r\nimport { Alert } from 'uiw';\r\nimport Notify from '@uiw/react-notify';\r\nimport {withTranslation} from \"react-i18next\";\r\n\r\n\r\nclass CloudsMgr extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cloudModalVisible: false,\r\n            nodeModalVisible: false,\r\n            nodeRoles: [{}],\r\n            workerIPs:[{}],\r\n            portNumber: 22,\r\n            clouds:[{}],\r\n            processing: false,\r\n            confirmDelete: false,\r\n            deleteTitle: this.props.t(\"Delete Cloud\"),\r\n        };\r\n\r\n        this.cloudNodesMap = null;\r\n        this.selectedCloudNodes = [];\r\n        this.provider = \"native\";\r\n        this.cloudName = \"\";\r\n        this.cloudId = \"\";\r\n        this.cloudIP = \"\";\r\n        this.selectedNode = null;\r\n\r\n        this.defaultSorted = [{\r\n            dataField: 'name',\r\n            order: 'asc'\r\n        }];\r\n\r\n        this.cloudVersionSelectRef =  React.createRef();\r\n        this.nodeTblRef = React.createRef();\r\n        this.cloudTblRef = React.createRef();\r\n\r\n        this.handleAddCloud = this.handleAddCloud.bind(this);\r\n        this.handleDeleteNode= this.handleDeleteNode.bind(this);\r\n        this.handleDeleteCloud = this.handleDeleteCloud.bind(this);\r\n\r\n        this.nodeRowSelected = this.nodeRowSelected.bind(this);\r\n        this.nodeRowDeSelected = this.nodeRowDeSelected.bind(this);\r\n        this.hideCloudModal = this.hideCloudModal.bind(this);\r\n        this.showCloudModal = this.showCloudModal.bind(this);\r\n        this.showNodeModal = this.showNodeModal.bind(this);\r\n        this.hideNodeModal = this.hideNodeModal.bind(this);\r\n        this.handleProcessingBegin = this.handleProcessingBegin.bind(this);\r\n        this.handleProcessingEnd = this.handleProcessingEnd.bind(this);\r\n\r\n        this.handleAddNode = this.handleAddNode.bind(this);\r\n        this.handleExpandCluster = this.handleExpandCluster.bind(this);\r\n        this.handleRefreshClouds = this.handleRefreshClouds.bind(this);\r\n        this.handleOpenCloudSetting = this.handleOpenCloudSetting.bind(this);\r\n\r\n        this.handleDeleteConfirm = this.handleDeleteConfirm.bind(this);\r\n        this.handleDeleteCancel = this.handleDeleteCancel.bind(this);\r\n\r\n        this.selectRow = {\r\n            mode: 'radio',\r\n            clickToSelect: true,\r\n            clickToExpand: true,\r\n            style: { backgroundColor: '#c8e6c9' },\r\n            classes: 'selection-row',\r\n            hideSelectAll: true,\r\n            onSelect: (row, isSelect, rowIndex, e) => {\r\n                this.selectedNode = null;\r\n                if (isSelect)\r\n                {\r\n                    this.provider = row.provider;\r\n                    this.cloudName = row.name;\r\n                    this.cloudId = row.id;\r\n                    this.selectedNode = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.expandRow = {\r\n            renderer: row => (\r\n                <div>\r\n                    <Grid fluid>\r\n                        <Col xs={24} md={12} align ={\"right\"}>\r\n                            {\r\n                              row.status === \"Running\" ||  row.status === \"Updating\"  ?\r\n\r\n                            <Grommet >\r\n                                <Tip\r\n                                    plain\r\n                                    content={\r\n                                        <Box\r\n                                            align=\"center\"\r\n                                            background=\"black\"\r\n                                            margin=\"xsmall\"\r\n                                            pad=\"xsmall\"\r\n                                            round=\"xsmall\"\r\n                                            flex={false}>\r\n                                            <Text color=\"white\">{this.props.t(\"Cloud Console\")}</Text>\r\n                                        </Box>}>\r\n                                    <Button disabled={false} alignSelf=\"end\"  onClick= { ()=>this.handleOpenCloudSetting() } icon={<SettingsOption color=\"RoyalBlue\" szie=\"small\" />} hoverIndicator />\r\n                                </Tip>\r\n                                <Tip\r\n                                    plain\r\n                                    content={\r\n                                        <Box\r\n                                            align=\"center\"\r\n                                            background=\"black\"\r\n                                            margin=\"xsmall\"\r\n                                            pad=\"xsmall\"\r\n                                            round=\"xsmall\"\r\n                                            flex={false}>\r\n                                            <Text color=\"white\">{this.props.t(\"Add Node\")}</Text>\r\n                                        </Box>}>\r\n                                    <Button disabled={false} alignSelf=\"end\"  onClick= { ()=>this.handleAddNode() } icon={<Cluster color=\"RoyalBlue\"  szie=\"small\"/>} hoverIndicator />\r\n                                </Tip>\r\n                                <Tip\r\n                                    plain\r\n                                    content={\r\n                                        <Box\r\n                                            align=\"center\"\r\n                                            background=\"black\"\r\n                                            margin=\"xsmall\"\r\n                                            pad=\"xsmall\"\r\n                                            round=\"xsmall\"\r\n                                            flex={false}>\r\n                                            <Text color=\"white\">{this.props.t(\"Delete Node\")}</Text>\r\n                                        </Box>}>\r\n                                    <Button disabled={false} alignSelf=\"end\"  onClick= { ()=>this.handleDeleteNode() } icon={<Close color=\"red\" szie=\"small\" />} hoverIndicator />\r\n                                </Tip>\r\n                            </Grommet>\r\n                                  : null\r\n                            }\r\n                        </Col>\r\n                        <div>\r\n                            <Alert\r\n                                isOpen={this.state.confirmDelete}\r\n                                type=\"danger\"\r\n                                title={this.props.t(this.state.deleteTitle)}\r\n                                confirmText={this.props.t(\"Confirm\")}\r\n                                cancelText={this.props.t(\"Cancel\")}\r\n                                maskClosable={true}\r\n                                hasBackdrop={false}\r\n                                onCancel={this.handleDeleteCancel}\r\n                                onConfirm={this.handleDeleteConfirm}\r\n                                content= {this.props.t(\"Are you sure to delete this? If deleted would not recover it!\")}\r\n                            >\r\n                            </Alert>\r\n                        </div>\r\n                        <Row>\r\n                            <Col xs={24} md={12} >\r\n                                <Card title={ <font size=\"3\"> {this.props.t('Nodes')}</font> } style={{ }} noHover >\r\n                                    <div>\r\n                                        <NodeModal\r\n                                            show={this.state.nodeModalVisible}\r\n                                            cloudName= {row.id}\r\n                                            cloudId={row.name}\r\n                                            handleProcessingBegin={this.handleProcessingBegin}\r\n                                            handleProcessingEnd={this.handleProcessingEnd}\r\n                                            handleClose={this.hideNodeModal}\r\n                                        />\r\n                                        <ReactTabulator\r\n                                            ref={ this.nodeTblRef}\r\n                                            rowDeselected={this.nodeRowDeSelected}\r\n                                            rowSelected={this.nodeRowSelected}\r\n                                            columns={this.nodeColumns}\r\n                                            data={this.selectedCloudNodes}\r\n                                            options={this.nodeOptions}\r\n                                        />\r\n                                    </div>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </Grid>\r\n                </div>\r\n            ),\r\n            onExpand: this.handleExpandCluster,\r\n            showExpandColumn: true,\r\n            onlyOneExpanding: true,\r\n            expandHeaderColumnRenderer: ({ isAnyExpands }) => {\r\n                if (isAnyExpands) {\r\n                    return <b> ∇ </b>;\r\n                }\r\n                return <b>  ▷ </b>;\r\n            },\r\n            expandColumnRenderer: ({ expanded }) => {\r\n                if (expanded) {\r\n                    return (\r\n                        <b> ∇ </b>\r\n                    );\r\n                }\r\n                return (\r\n                    <b>  ▷ </b>\r\n                );\r\n            }\r\n        };\r\n\r\n        this.nodeTblColumns = [\r\n            /* {\r\n                 dataField: 'id',\r\n                 sort: true,\r\n                 text: 'ID'\r\n             },*/\r\n            {\r\n                dataField: 'name',\r\n                sort: true,\r\n                filter: textFilter(),\r\n                searchable:true,\r\n                headerStyle: {'font-size' : 'normal','font-weight': 'bold'},\r\n                //isKey : true ,\r\n                text: this.props.t('Cloud Name')\r\n            },\r\n            {\r\n                dataField: 'status',\r\n                sort: true,\r\n                headerStyle: {'font-size' : 'normal','font-weight': 'bold'},\r\n                text:  this.props.t('Status'),\r\n                formatter: this.statusFormatter,\r\n            },\r\n            {   dataField: 'version',\r\n                headerStyle: {'font-size' : 'normal','font-weight': 'bold'},\r\n                text:   this.props.t('Version')\r\n            },\r\n            {\r\n                dataField: 'master',\r\n                sort: true,\r\n                headerStyle: {'font-size' : 'normal','font-weight': 'bold'},\r\n                text:   this.props.t('Master Nodes')\r\n            },\r\n            {  dataField: 'worker',\r\n                sort: true,\r\n                //filter: textFilter(),\r\n                headerStyle: {'font-size' : 'normal','font-weight': 'bold'},\r\n                text:   this.props.t('Worker Nodes')\r\n            },\r\n            {\r\n                dataField: 'region',\r\n                sort: false,\r\n                searchable:true,\r\n                headerStyle: {'font-size' : 'normal','font-weight': 'bold'},\r\n                filter: textFilter(),\r\n                text: this.props.t('Region')\r\n            },\r\n            {\r\n                dataField: 'updated-at',\r\n                sort: true,\r\n                headerStyle: {'font-size' : 'normal','font-weight': 'bold'},\r\n                formatter: this.dateTimeFormatter,\r\n                text: this.props.t('Updated Time')\r\n            }\r\n        ];\r\n    }\r\n\r\n    rowEvents = {\r\n        onClick: (e, row, rowIndex) => {\r\n            this.provider = row.provider;\r\n            this.cloudName = row.name;\r\n            this.cloudId = row.id;\r\n            this.selectedNode = null;\r\n        }\r\n    };\r\n\r\n    dateTimeFormatter(cell, row, rowIndex, formatExtraData) {\r\n        let dateStr = cell !== undefined ? new Date(cell /1000000).toLocaleString() : \"\";\r\n        return  dateStr;\r\n    }\r\n\r\n    statusFormatter(cell, row, rowIndex, formatExtraData) {\r\n        let str = cell;\r\n        if (navigator.language === \"zh-CN\" )\r\n        {\r\n            switch(cell)\r\n            {\r\n                case \"Running\":\r\n                    str =  <font color={\"green\"}  >运行中...</font>;\r\n                    break;\r\n                case \"Stopped\":\r\n                    str = <font color={\"red\"} >停止</font>;\r\n                    break;\r\n                case \"Creating\":\r\n                    str =  <font color={\"blue\"} >创建中...</font>;\r\n                    break;\r\n                case \"Missing\":\r\n                    str =  <font color={\"red\"} >丢失</font>;\r\n                    break;\r\n                case \"Failed\":\r\n                    str =  <font color={\"red\"} >失败</font>;\r\n                    break;\r\n                case \"Upgrading\":\r\n                    str = <font color={\"blue\"} >升级中...</font>;\r\n                    break;\r\n                case \"Removing\":\r\n                    str = <font color={\"blue\"} >删除中...</font>;\r\n                    break;\r\n                case \"Updating\":\r\n                    str =  <font color={\"blue\"} >更新中...</font>;\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        else\r\n        {\r\n            switch(cell)\r\n            {\r\n                case \"Running\":\r\n                    str =  <font color={\"green\"} >{cell}</font>;\r\n                    break;\r\n                case \"Stopped\":\r\n                    str = <font color={\"red\"} >{cell}</font>;\r\n                    break;\r\n                case \"Creating\":\r\n                    str =  <font color={\"blue\"} >{cell}</font>;\r\n                    break;\r\n                case \"Missing\":\r\n                    str =  <font color={\"red\"} >{cell}</font>;\r\n                    break;\r\n                case \"Failed\":\r\n                    str =  <font color={\"red\"} >{cell}</font>;\r\n                    break;\r\n                case \"Upgrading\":\r\n                    str = <font color={\"blue\"} >{cell}</font>;\r\n                    break;\r\n                case \"Removing\":\r\n                    str = <font color={\"blue\"} >{cell}</font>;\r\n                    break;\r\n                case \"Updating\":\r\n                    str =  <font color={\"blue\"} >{cell}</font>;\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    handleOpenCloudSetting()\r\n    {\r\n        if (this.cloudIP !== undefined && this.cloudIP !== null && this.cloudIP !== \"\")\r\n            window.open(\"http://\" + this.cloudIP + \":30008\" )\r\n    }\r\n\r\n    handleDeleteCancel(e)\r\n    {\r\n        this.setState((state) => {return {confirmDelete: false}});\r\n    }\r\n\r\n    async handleDeleteConfirm(e)\r\n    {\r\n        let nodeRow = this.selectedNode;\r\n\r\n        if(nodeRow == undefined || nodeRow === null)\r\n        {\r\n            await fetch(\"/cluster/\" + this.cloudName + \"/provider/\" + this.provider,  {\r\n                method: \"delete\",\r\n            })\r\n                .then( response => {\r\n                    // check for error response\r\n                    if (!response.ok) {\r\n                        // get error message from body or default to response statusText\r\n                        return Promise.reject();\r\n                    }\r\n                    return response.text();\r\n                })\r\n                .then((respData) => {\r\n                    //deployTarget = respData;\r\n                    //this.setState((state) => {return {deployTarget : respData}});\r\n                    if(respData === \"OK\")\r\n                    {\r\n                        let clouds = this.state.clouds.slice();\r\n                        for(let i= 0; i < clouds.length;i++)\r\n                        {\r\n                            if(clouds[i].id ==  this.cloudName)\r\n                            {\r\n                                clouds.splice(i,1);\r\n                                this.setState((state) => {\r\n                                    return {clouds: clouds}\r\n                                });\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Notify.success({  description:  this.props.t(\"Succeed to delete cloud!\") , duration: 10 ,placement : \"topRight\"});\r\n                })\r\n                .catch(error => {\r\n                    // this.setState((state) => {return {errorMessage: error}});\r\n                    //console.error('There was an error!', error);\r\n                    Notify.error({  description:  this.props.t(\"Failed to delete cloud!\") , duration: 10 ,placement : \"topRight\"});\r\n                });\r\n\r\n            this.setState((state) => {return {confirmDelete: false}});\r\n        }\r\n        else\r\n        {\r\n            let ipAddress = nodeRow.getData().ipaddress;\r\n            let instanceId =  ipAddress.replaceAll(\".\",\"-\");\r\n            let url = \"/cluster/\" + nodeRow.getData().cluster + \"/node/\" + nodeRow.getData().hostname +\"/instance/\" + instanceId;\r\n\r\n            await fetch(url,  {\r\n                method: \"delete\",\r\n            })\r\n                .then( response => {\r\n                    // check for error response\r\n                    if (!response.ok) {\r\n                        // get error message from body or default to response statusText\r\n                        return Promise.reject();\r\n                    }\r\n                    return response.text();\r\n                })\r\n                .then((respData) => {\r\n                    //console.log(respData);\r\n                    if(respData === \"OK\")\r\n                    {\r\n                        //let position = this.nodeTblRef.current.table.getRowPosition(nodeRow, true);\r\n                        //this.nodeTblRef.current.table.deleteRow(position);\r\n                        //console.log(position);\r\n                        nodeRow.delete();\r\n                        Notify.success({  description:  this.props.t(\"Succeed to delete node!\") , duration: 10 ,placement : \"topRight\"});\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    Notify.error({  description:  this.props.t(\"Failed to delete node!\") , duration: 10 ,placement : \"topRight\"});\r\n                    console.error('There was an error!', error);\r\n                });\r\n        }\r\n\r\n        this.setState((state) => {return {confirmDelete: false}});\r\n        this.cloudNodesMap = await this.loadCloudMetadata();\r\n    }\r\n\r\n    handleProcessingBegin()\r\n    {\r\n        this.setState((state) => {\r\n            return {processing: true}\r\n        });\r\n    }\r\n\r\n    async loadCloudMetadata()\r\n    {\r\n        let nodeMap = new Map();\r\n        let clouds = [];\r\n        let res = await fetch('/clusters/native', {\r\n            method: \"GET\",\r\n            mode: \"no-cors\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n\r\n        clouds = await res.json();\r\n        if (res.ok)\r\n        {\r\n            if (clouds !== undefined && clouds !== null)\r\n            {\r\n                for(let i =0;i< clouds.length;i++)\r\n                {\r\n                    let res = await fetch('/cluster/'+ clouds[i].id + \"/nodes\", {\r\n                        method: \"GET\",\r\n                        mode: \"no-cors\",\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        }\r\n                    });\r\n\r\n                    let nodes = await res.json();\r\n                    if (res.ok)\r\n                    {\r\n                        nodeMap.set(clouds[i].id,nodes);\r\n                    }\r\n                }\r\n\r\n                this.setState((state) => {return {clouds: clouds}});\r\n                return nodeMap;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    async handleProcessingEnd()\r\n    {\r\n        this.cloudNodesMap = await this.loadCloudMetadata();\r\n        this.setState((state) => {\r\n            return {processing: false}\r\n        });\r\n\r\n        this.selectedNode = null;\r\n\r\n    }\r\n\r\n    handleExpandCluster(row, isExpand, rowIndex, e)\r\n    {\r\n        if (isExpand)\r\n        {\r\n            let expandedCloud =   this.cloudNodesMap.get(row.id);\r\n            let nodes = null;\r\n            if (expandedCloud !== undefined && expandedCloud !== null)\r\n            {\r\n                nodes = expandedCloud.nodes;\r\n            }\r\n\r\n            let masterNodeIp = \"\";\r\n            if ( nodes !== undefined  && nodes !== null)\r\n            {\r\n                //let nodes =  result.nodes;\r\n                let expandedNodes = [];\r\n                for(let i =0; i < nodes.length;i++)\r\n                {\r\n                    let nodeIp = nodes[i][\"instance-id\"].replaceAll(\"-\",\".\");\r\n                    let roles = nodes[i].roles;\r\n\r\n                    if(roles !== undefined)\r\n                    {\r\n                        let nodeRole = roles.match(\"master\");\r\n                        if (nodeRole === null)\r\n                        {\r\n                            nodeRole = \"worker\"\r\n                        }\r\n                        else\r\n                        {\r\n                            masterNodeIp =  nodeIp;\r\n                        }\r\n\r\n                        expandedNodes.push({\r\n                            \"cluster\":row.name,\r\n                            \"ipaddress\":nodeIp,\r\n                            \"nodetype\": nodeRole,\r\n                            \"hostname\" : nodes[i].hostname,\r\n                            \"containerRuntimeVersion\" :  nodes[i].containerRuntimeVersion,\r\n                            \"roles\" : nodeRole,\r\n                            \"status\" : nodes[i].status,\r\n                        });\r\n                    }\r\n                    else\r\n                    {\r\n                        expandedNodes.push({\r\n                            \"cluster\":row.name,\r\n                            \"ipaddress\":nodeIp,\r\n                            \"nodetype\": \"\",\r\n                            \"hostname\" : nodes[i].hostname,\r\n                            \"containerRuntimeVersion\" :  nodes[i].containerRuntimeVersion,\r\n                            \"roles\" : \"\",\r\n                            \"status\" : nodes[i].status,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                this.selectedCloudNodes = expandedNodes;\r\n                this.cloudIP = masterNodeIp;\r\n                this.provider = row.provider;\r\n                this.cloudName = row.name;\r\n                this.cloudId = row.cloudId;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.selectedNode = null;\r\n            this.cloudName = \"\";\r\n            this.cloudId = \"\";\r\n            this.cloudIP = \"\";\r\n            this.selectedNode = null;\r\n        }\r\n    }\r\n\r\n    async handleRefreshClouds()\r\n    {\r\n        this.setState((state) => {\r\n            return {processing: true}\r\n        });\r\n        this.cloudNodesMap = await this.loadCloudMetadata();\r\n        this.selectedNode = null;\r\n        this.setState((state) => {return {processing: false}});\r\n    }\r\n\r\n    nodeOptions = {\r\n        //height:280,\r\n        //headerVisible:false,\r\n        resizableColumns:true,\r\n        persistence:false,\r\n        //movableRows: true,\r\n        resizableRows: true,\r\n        selectable:1,\r\n        layout:\"fitColumns\",\r\n        //pagination:\"local\",\r\n        //paginationSize:5,\r\n        //paginationSizeSelector:[5, 10, 15, 20],\r\n        /*\r\n        rowContextMenu :[\r\n            {\r\n                label:\"Delete\",\r\n                menu:[\r\n                    {\r\n                        label:\"<i class='fas fa-trash'></i> Delete Row\",\r\n                        action:function(e, row){\r\n\r\n                        }\r\n                    },\r\n                    {\r\n                        label:\"<i class='fas fa-ban'></i> Disabled Option\",\r\n                        disabled:true,\r\n                        action:function(e, row){\r\n\r\n                        }\r\n                    },\r\n                ]\r\n            }\r\n        ],*/\r\n        locale:true,\r\n        langs:{\r\n            \"zh-cn\":{ //Chinese language definition\r\n                \"columns\":{\r\n                    \"cluster\":\"云\",\r\n                },\r\n                \"pagination\":{\r\n                    \"first\":\"首页\",\r\n                    \"first_title\":\"首页\",\r\n                    \"last\":\"最后页\",\r\n                    \"last_title\":\"最后页\",\r\n                    \"prev\":\"前一页\",\r\n                    \"prev_title\":\"前一页\",\r\n                    \"next\":\"下一页\",\r\n                    \"next_title\":\"下一页\",\r\n                    \"all\":\"全部\",\r\n                    \"page_size\":\"行数\",\r\n                },\r\n                \"headerFilters\":{\r\n                    \"default\":\"filter ...\",\r\n                    \"columns\":{\r\n                        \"ipaddress\":\"过滤主机地址 ...\",\r\n                        \"hostname\":\"过滤主机名称 ...\",\r\n                        \"roles\":\"过滤主机角色 ...\",\r\n                        \"status\":\"过滤主机运行状态 ...\",\r\n                    }\r\n                },\r\n                \"custom\":{\r\n                    \"worker\":\"工作节点\",\r\n                    \"master\":\"控制节点\",\r\n                    \"Ready\" : \"就绪\",\r\n                    \"NotReady\" : \"离线\"\r\n                },\r\n            },\r\n            \"en\":{ //Chinese language definition\r\n                \"custom\":{\r\n                    \"worker\":\"worker\",\r\n                    \"master\":\"master\",\r\n                    \"Ready\" : \"Ready\",\r\n                    \"NotReady\" : \"NotReady\"\r\n                },\r\n            }\r\n        },\r\n        rowFormatter:function(row, data){\r\n            var data = row.getData();\r\n\r\n            console.log(data.status);\r\n\r\n            if(data.status === \"Ready\"){\r\n                row.getElement().style.foregroundColor = \"#1e3b20\";\r\n            }\r\n        },\r\n    };\r\n\r\n    nodeColumns =\r\n        [\r\n            {formatter:\"rowSelection\", width:5,titleFormatter:\"rowSelection\", hozAlign:\"center\", headerSort:false, cellClick:function(e, cell){\r\n                    cell.getRow().toggleSelect();\r\n                }},\r\n            {width:5,hozAlign:\"center\",formatter:\"rownum\",visible:true},\r\n            { title: this.props.t(\"Cluster\"), field: \"cluster\" ,formatter:\"textarea\" ,visible:false,headerHozAlign:\"center\",hozAlign:\"center\"},\r\n            { title: this.props.t(\"IP Address\"), field: \"ipaddress\" ,formatter:\"textarea\" ,visible:true,headerHozAlign:\"center\",hozAlign:\"center\", headerFilter:\"input\"},\r\n            { title: this.props.t(\"Host Name\"), field: \"hostname\" ,formatter:\"textarea\" ,visible:true,headerHozAlign:\"center\",hozAlign:\"center\", headerFilter:\"input\"},\r\n            { title: this.props.t(\"Container Runtime\"), field: \"containerRuntimeVersion\" ,formatter:\"textarea\" ,visible:true,headerHozAlign:\"center\",hozAlign:\"center\"},\r\n            { title: this.props.t(\"Roles\"), field: \"roles\" ,visible:true,headerHozAlign:\"center\",hozAlign:\"center\",formatter:function(cell, formatterParams, onRendered){\r\n                    if (cell.getValue() === \"worker\")\r\n                    {\r\n                        return cell.getRow().getTable().getLang().custom.worker;\r\n                    }\r\n                    else\r\n                    {\r\n                        cell.getElement().style.fontWeight= \"bold\";\r\n                        return cell.getRow().getTable().getLang().custom.master;\r\n                    }\r\n                }} ,\r\n            { title: this.props.t(\"Status\"), field: \"status\" ,visible:true,headerHozAlign:\"center\",hozAlign:\"center\",formatter:function(cell, formatterParams, onRendered){\r\n                    if (cell.getValue() === \"Ready\")\r\n                    {\r\n                        cell.getElement().style.color  = \"green\";\r\n                        return cell.getRow().getTable().getLang().custom.Ready;\r\n                    }\r\n                    else\r\n                    {\r\n                        cell.getElement().style.color  = \"#f00\";\r\n                        //cell.getElement().style.fontWeight= \"bold\";\r\n                        return cell.getRow().getTable().getLang().custom.NotReady;\r\n                    }\r\n                }} ,\r\n            /*{ formatter:deleteIcon,width:10 ,hozAlign: \"center\",\r\n                cellClick:function(e, cell) {\r\n                    let confirmAction;\r\n                    confirmAction = window.confirm(\"Are you sure to delete this node?\");\r\n                    if (confirmAction) {\r\n                        if (cell.getRow().getTable().getDataCount() > 1) {\r\n                            let ipAddress = cell.getRow().getData().ipaddress;\r\n                            let instanceId =  ipAddress.replaceAll(\".\",\"-\");\r\n                            let url = \"/cluster/\" + cell.getRow().getData().cluster + \"/node/\" + cell.getRow().getData().hostname +\"/instance/\" + instanceId;\r\n\r\n                            fetch(url,  {\r\n                                method: \"delete\",\r\n                            })\r\n                                .then( response => {\r\n                                    // check for error response\r\n                                    if (!response.ok) {\r\n                                        // get error message from body or default to response statusText\r\n                                        return Promise.reject();\r\n                                    }\r\n                                    return response.text();\r\n                                })\r\n                                .then((respData) => {\r\n                                    //console.log(respData);\r\n                                    if(respData === \"OK\")\r\n                                    {\r\n                                        cell.getTable().deleteRow(cell.getRow());\r\n                                    }\r\n                                })\r\n                                .catch(error => {\r\n                                    console.error('There was an error!', error);\r\n                                });\r\n                        }\r\n                        else\r\n                        {\r\n                            if (cell.getRow().getTable().getDataCount() ===1)\r\n                            {\r\n                                let ipAddress = cell.getRow().getData().ipaddress;\r\n                                let instanceId =  ipAddress.replaceAll(\".\",\"-\");\r\n                                let url = \"/cluster/\" + cell.getRow().getData().cluster + \"/node/\" + cell.getRow().getData().hostname +\"/instance/\" + instanceId;\r\n\r\n                                fetch(url,  {\r\n                                    method: \"delete\",\r\n                                })\r\n                                    .then( response => {\r\n                                        // check for error response\r\n                                        if (!response.ok) {\r\n                                            // get error message from body or default to response statusText\r\n                                            return Promise.reject();\r\n                                        }\r\n                                        return response.text();\r\n                                    })\r\n                                    .then((respData) => {\r\n                                        //console.log(respData);\r\n                                        if(respData === \"OK\")\r\n                                        {\r\n                                            cell.getTable().deleteRow(cell.getRow());\r\n                                            cell.getTable().addRow();\r\n                                        }\r\n                                    })\r\n                                    .catch(error => {\r\n                                        console.error('There was an error!', error);\r\n                                    });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n             */\r\n        ];\r\n\r\n    handleAddCloud()\r\n    {\r\n        this.showCloudModal();\r\n    }\r\n\r\n    handleDeleteNode()\r\n    {\r\n        if (this.selectedNode !== undefined && this.selectedNode !== null)\r\n            this.setState((state) => {return {confirmDelete: true,deleteTitle : this.props.t(\"Delete Node\")}});\r\n    }\r\n\r\n    handleDeleteCloud()\r\n    {\r\n        if  (  this.cloudName !== undefined && this.cloudName !== \"\")\r\n        {\r\n            this.setState((state) => {return {confirmDelete: true,deleteTitle : this.props.t(\"Delete Cloud\")}});\r\n        }\r\n    }\r\n\r\n    showNodeModal()\r\n    {\r\n        this.setState((state) => {\r\n            return {nodeModalVisible: true}\r\n        });\r\n    }\r\n\r\n    async hideNodeModal()\r\n    {\r\n        this.setState((state) => {\r\n            return {nodeModalVisible: false}\r\n        });\r\n    };\r\n\r\n    showCloudModal()\r\n    {\r\n        this.setState((state) => {\r\n            return {cloudModalVisible: true}\r\n        });\r\n    };\r\n\r\n    hideCloudModal()\r\n    {\r\n        this.setState((state) => {\r\n            return {cloudModalVisible: false}\r\n        });\r\n    };\r\n\r\n    handleAddNode()\r\n    {\r\n        this.showNodeModal();\r\n    }\r\n\r\n    async componentDidMount()\r\n    {\r\n        this.setState((state) => {\r\n            return {processing: true}\r\n        });\r\n\r\n        this.cloudNodesMap = await this.loadCloudMetadata();\r\n        this.setState((state) => {return {processing: false}});\r\n    }\r\n\r\n    async nodeRowSelected(row)\r\n    {\r\n        this.selectedNode = row;\r\n        this.setState((state) => {return {deleteTitle : this.props.t(\"Delete Node\")}});\r\n    }\r\n\r\n    nodeRowDeSelected(row)\r\n    {\r\n        this.setState((state) => {return {deleteTitle :this.props.t(\"Delete Cloud\")}});\r\n        this.selectedNode = null;\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Card title={ <font size=\"3\" color=\"RoyalBlue\"> {this.props.t('Edge Cloud Center')}</font> } style={{ height :1200}} noHover >\r\n                    <Grid fluid>\r\n                        <Row end=\"xs\">\r\n                            <Col xs={24} md={12} align ={\"right\"}>\r\n                                <Grommet >\r\n                                    <Tip\r\n                                        plain\r\n                                        content={\r\n                                            <Box\r\n                                                align=\"center\"\r\n                                                background=\"black\"\r\n                                                margin=\"xsmall\"\r\n                                                pad=\"xsmall\"\r\n                                                round=\"xsmall\"\r\n                                                flex={false}>\r\n                                                <Text color=\"white\">{this.props.t('Add Cloud')}</Text>\r\n                                            </Box>}>\r\n                                        <Button disabled={false} alignSelf=\"end\"   onClick= { ()=>this.handleAddCloud() } icon={<Add color=\"RoyalBlue\" />} hoverIndicator />\r\n                                    </Tip>\r\n                                    <Tip\r\n                                        plain\r\n                                        content={\r\n                                            <Box\r\n                                                align=\"center\"\r\n                                                background=\"black\"\r\n                                                margin=\"xsmall\"\r\n                                                pad=\"xsmall\"\r\n                                                round=\"xsmall\"\r\n                                                flex={false}>\r\n                                                <Text color=\"white\">{this.props.t(\"Delete Cloud\")}</Text>\r\n                                            </Box>}>\r\n                                        <Button disabled={false} alignSelf=\"end\"  onClick= { ()=>this.handleDeleteCloud() } icon={<Close color=\"red\" />} hoverIndicator />\r\n                                    </Tip>\r\n                                    <Tip\r\n                                        plain\r\n                                        content={\r\n                                            <Box\r\n                                                align=\"center\"\r\n                                                background=\"black\"\r\n                                                margin=\"xsmall\"\r\n                                                pad=\"xsmall\"\r\n                                                round=\"xsmall\"\r\n                                                flex={false}>\r\n                                                <Text color=\"white\">{this.props.t('Refresh Clouds')}</Text>\r\n                                            </Box>}>\r\n                                        <Button disabled={false} alignSelf=\"end\"   onClick= { ()=>this.handleRefreshClouds() } icon={<Refresh color=\"RoyalBlue\" />} hoverIndicator />\r\n                                    </Tip>\r\n                                </Grommet>\r\n                            </Col>\r\n                            <Col xs={4} md={2} align ={\"right\"}></Col>\r\n                        </Row>\r\n                        <p></p>\r\n                        { this.state.processing ? (\r\n                            <div>\r\n                                <Spinner/>\r\n                            </div>\r\n                        ) : (null) }\r\n                        <CloudModal\r\n                            show={this.state.cloudModalVisible}\r\n                            nodes={this.state.nodes}\r\n                            handleProcessingBegin={this.handleProcessingBegin}\r\n                            handleProcessingEnd={this.handleProcessingEnd}\r\n                            handleClose={this.hideCloudModal}>\r\n                        </CloudModal>\r\n                        <Row>\r\n                            <Col xs={24} md={12}>\r\n                                <div>\r\n                                    <BootstrapTable\r\n                                        //bootstrap4\r\n                                       // tabIndexCell\r\n                                        bordered={false}\r\n                                        key={this.state.cloudId}\r\n                                        defaultSorted={ this.defaultSorted }\r\n                                        selectRow={this.selectRow }\r\n                                        filter={ filterFactory() }\r\n                                        filterPosition=\"top\"\r\n                                        keyField='id'\r\n                                        rowEvents={ this.rowEvents }\r\n                                        data={this.state.clouds}\r\n                                        columns={ this.nodeTblColumns }\r\n                                        expandRow={ this.expandRow }\r\n                                        pagination={ paginationFactory(  {\r\n                                            pageStartIndex: 1,\r\n                                            sizePerPage: 30,\r\n                                            hideSizePerPage: true,\r\n                                            hidePageListOnlyOnePage: false\r\n                                        }) }\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <p></p>\r\n                    </Grid>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  withTranslation() (CloudsMgr);\r\n","/*******************************************************************************\n * Copyright © 2022-2029 EdgeGo, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: EdgeGo, <xgtian@163.com>\n *******************************************************************************/\n\nimport React, { Component } from 'react';\nimport './App.scss';\nimport '../assets/css/app.css';\nimport Footer from './shared/Footer';\nimport { withTranslation } from \"react-i18next\";\nimport CloudsMgr from \"./core/CloudsMgr\";\n\nclass App extends Component {\n  state = {}\n  componentDidMount()\n  {\n  }\n\n  render () {\n    let footerComponent = !this.state.isFullPageLayout ? <Footer/> : '';\n    return (\n      <div>\n        <CloudsMgr></CloudsMgr>\n        { footerComponent }\n      </div>\n    );\n  }\n\n  componentDidUpdate(prevProps)\n  {\n  }\n}\n\nexport default withTranslation() (App);\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init( {\n      resources:{\n          en: {\n              translations: {\n                \"Overview dashboard\": \"Overview dashboard\",\n              }\n          },\n          zh:{\n            translations: {\n                \"Core\" : \"核心\",\n                \"Add Cloud\" : \" 新建云\",\n                \"Cluster\" : \"云\",\n                \"Cloud Name\" : \"名称\",\n                \"Status\" : \"运行状态\",\n                \"Version\" : \"运行版本\",\n                \"Master Nodes\" : \"控制节点数\",\n                \"Worker Nodes\" : \"工作节点数\",\n                \"Refresh Clouds\" : \"刷新\",\n                \"Edge Cloud Center\" : \"边缘云控制中心\",\n                \"Cloud Console\" : \"云控制台\",\n                \"Add Node\" : \"增加节点\",\n                \"Delete\" : \"删除\",\n                \"Are you sure to delete this? If deleted would not recover it!\" : \"确定要删除,如果确定删除将无法恢复?\",\n                \"Confirm\" : \"确定\",\n                \"Cancel\" : \"取消\",\n                \"Delete Cloud\" : \"删除云\",\n                \"Delete Node\" : \"删除节点\",\n                \"Succeed to delete node!\" :\"成功删除节点\",\n                \"Failed to delete node!\" : \"删除节点失败\",\n                \"Succeed to delete cloud!\" : \"删除边缘云成功!\",\n                \"Failed to delete cloud!\" : \"删除边缘云失败!\",\n                \"IP Address\": \"主机地址\",\n                \"Host Name\" : \"主机名\",\n                \"Container Runtime\" : \"容器版本\",\n                \"Roles\": \"角色\",\n                \"Region\": \"区域\",\n                \"Node Account\" : \"节点账号\",\n                \"Node Password\" : \"节点密码\",\n                \"SSH Account Password\" : \"节点密码\",\n                \"More\" : \"更多\",\n                \"Less\" : \"减少\",\n                \"Nodes\" : \"节点\",\n                \"SSH Key Path\" :\"SSH私钥路径\",\n                \"SSH Cert Path\" :\"SSH私钥认证路径\",\n                \"SSH Key Passphrase\" :\"SSH私钥密码\",\n                \"SSH Agent Auth\" :\" SSH代理认证\",\n                \"Node Port\" :\"节点端口\",\n                \"Submit\" : \"提交\",\n                \"Please input cloud name\" : \"输入名称\",\n                \"Please Input SSH Account Name\" : \"输入账号名称\",\n                \"Node Address\" : \"节点主机\",\n                \"Node Type\" : \"节点类型\",\n                \"Please Input SSH Account Password\": \"输入账号登录密码\",\n                \"Please input SSH private key path\" : \"输入SSH私有密钥文件路径\",\n                \"SSH private key certificate path\" : \"输入SSH私有密钥认证文件路径\",\n                \"Host \" : \"主机 : \",\n                \" not reachable,Please check host address,account and password if correct\" : \" 不能够访问，请检查主机地址，账号，密码是否正确\",\n                \"Succeed to join cloud\" : \"加入云成功！\",\n                \"failed to join cloud,error:\" : \"加入边缘云失败，错误: \",\n                \"Succeed to create cloud!\" : \"创建边缘云成功!\",\n                \"Failed to create cloud!\" : \"创建边缘云失败!\",\n                \"Updated Time\" : \"更改时间\",\n                \"Please input cloud region\" : \"输入边缘云所在区域\",\n                \"At least set one master node to cloud\" : \"至少需要一个主控制节点\",\n                \"worker\": \"工作节点\",\n                \"master\": \" 控制节点\",\n                \"Disable\": \"禁用\",\n                \"Enable\": \"启用\",\n                \"Running\" : \"运行中...\"\n            }\n          },\n      },\n    //fallbackLng: \"zh\",\n    //lng: \"zh\",\n    // have a common namespace used around the full app\n    ns: ['translations'],\n    defaultNS: 'translations',\n\n    keySeparator: false, // we use content as keys\n\n    interpolation: {\n      escapeValue: false\n    },\n    detection: {\n      order: [ 'navigator'],\n      //caches: ['localStorage', 'sessionStorage', 'cookie'],\n    }\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from './app/App';\nimport \"./i18n\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/cloud\">\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}